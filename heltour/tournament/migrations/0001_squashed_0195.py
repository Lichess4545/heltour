# Generated by Django 4.2.9 on 2025-01-20 12:20

import ckeditor.fields
import ckeditor_uploader.fields
import datetime
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import heltour.tournament.models
import re

class Migration(migrations.Migration):

    replaces = [('tournament', '0001_initial'), ('tournament', '0002_auto_20160717_2019'),
            ('tournament', '0003_auto_20160717_2154'), ('tournament', '0004_auto_20160717_2229'),
            ('tournament', '0005_auto_20160717_2320'), ('tournament', '0006_auto_20160718_2011'),
            ('tournament', '0007_player_games_played'), ('tournament', '0008_team_is_active'),
            ('tournament', '0009_auto_20160720_0202'), ('tournament', '0010_auto_20160720_0307'),
            ('tournament', '0011_auto_20160722_2321'), ('tournament', '0012_auto_20160723_1942'),
            ('tournament', '0013_auto_20160723_2003'), ('tournament', '0014_auto_20160723_2025'),
            ('tournament', '0015_auto_20160723_2331'), ('tournament', '0016_registration_status_changed_by'),
            ('tournament', '0017_registration_status_changed_date'), ('tournament', '0018_auto_20160724_0342'),
            ('tournament', '0019_auto_20160724_0500'), ('tournament', '0020_auto_20160724_1649'),
            ('tournament', '0021_auto_20160724_1855'), ('tournament', '0022_auto_20160724_1859'),
            ('tournament', '0023_apikey'), ('tournament', '0024_season_is_active'),
            ('tournament', '0025_auto_20160726_0154'), ('tournament', '0026_round_is_completed'),
            ('tournament', '0027_auto_20160726_1848'), ('tournament', '0028_auto_20160726_1853'),
            ('tournament', '0029_auto_20160727_0214'), ('tournament', '0030_loneplayerpairing_teamplayerpairing'),
            ('tournament', '0031_auto_20160728_0520'), ('tournament', '0032_auto_20160728_0521'),
            ('tournament', '0033_auto_20160728_0612'), ('tournament', '0034_auto_20160728_2146'),
            ('tournament', '0035_auto_20160728_2157'), ('tournament', '0036_auto_20160729_2033'),
            ('tournament', '0037_auto_20160729_2037'), ('tournament', '0038_auto_20160729_2042'),
            ('tournament', '0039_round_publish_pairings'), ('tournament', '0040_auto_20160801_0624'),
            ('tournament', '0041_auto_20160801_2116'), ('tournament', '0042_auto_20160801_2309'),
            ('tournament', '0043_auto_20160802_0103'), ('tournament', '0044_auto_20160802_0342'),
            ('tournament', '0045_auto_20160802_2005'), ('tournament', '0046_auto_20160802_2113'),
            ('tournament', '0047_auto_20160802_2258'), ('tournament', '0048_auto_20160803_0311'),
            ('tournament', '0049_auto_20160804_0509'), ('tournament', '0050_auto_20160804_0522'),
            ('tournament', '0051_playeravailability'), ('tournament', '0052_auto_20160805_0111'),
            ('tournament', '0053_team_seed_rating'), ('tournament', '0054_auto_20160808_1732'),
            ('tournament', '0055_auto_20160809_2228'), ('tournament', '0056_auto_20160810_0204'),
            ('tournament', '0057_auto_20160812_2249'), ('tournament', '0058_auto_20160813_2314'),
            ('tournament', '0059_auto_20160813_2318'), ('tournament', '0060_auto_20160813_2319'),
            ('tournament', '0061_auto_20160813_2319'), ('tournament', '0062_auto_20160814_0052'),
            ('tournament', '0063_season_tag'), ('tournament', '0064_auto_20160814_1729'),
            ('tournament', '0065_auto_20160814_1843'), ('tournament', '0066_auto_20160814_1855'),
            ('tournament', '0067_auto_20160815_2015'), ('tournament', '0068_auto_20160815_2256'),
            ('tournament', '0069_auto_20160816_0138'), ('tournament', '0070_auto_20160816_0552'),
            ('tournament', '0071_auto_20160817_2044'), ('tournament', '0072_auto_20160817_2105'),
            ('tournament', '0073_auto_20160817_2107'), ('tournament', '0074_auto_20160817_2247'),
            ('tournament', '0075_auto_20160818_0456'), ('tournament', '0076_auto_20160818_2336'),
            ('tournament', '0077_auto_20160819_0430'), ('tournament', '0078_auto_20160820_0049'),
            ('tournament', '0079_loneplayerscore_perf_rating'), ('tournament', '0080_auto_20160824_2233'),
            ('tournament', '0081_auto_20160829_1946'), ('tournament', '0082_privateurlauth'),
            ('tournament', '0083_auto_20160901_1905'), ('tournament', '0084_gamenomination_pairing'),
            ('tournament', '0085_auto_20160901_2341'), ('tournament', '0086_auto_20160901_2352'),
            ('tournament', '0087_season_nominations_open'), ('tournament', '0087_navitem'),
            ('tournament', '0088_merge'), ('tournament', '0089_auto_20160912_0430'),
            ('tournament', '0090_auto_20160912_2058'), ('tournament', '0091_remove_player_is_moderator'),
            ('tournament', '0092_leaguemoderator_send_contact_emails'), ('tournament', '0093_playerpairing_colors_reversed'),
            ('tournament', '0094_season_playoffs'), ('tournament', '0095_auto_20160914_2305'),
            ('tournament', '0096_teamscore_playoff_score'), ('tournament', '0097_playerpairing_tv_state'),
            ('tournament', '0098_auto_20160916_1934'), ('tournament', '0099_alternate_priority_date_override'),
            ('tournament', '0100_auto_20160920_0428'), ('tournament', '0101_alternateassignment_replaced_player'),
            ('tournament', '0102_auto_20161008_2116'), ('tournament', '0103_playerbye_player_rating'),
            ('tournament', '0104_auto_20161008_2135'), ('tournament', '0105_seasonplayer_final_rating'),
            ('tournament', '0106_auto_20161031_0546'), ('tournament', '0107_auto_20161101_2120'),
            ('tournament', '0108_league_time_control'), ('tournament', '0109_auto_20161108_0128'),
            ('tournament', '0110_scheduledevent'), ('tournament', '0111_auto_20161109_0440'),
            ('tournament', '0112_auto_20161127_1814'), ('tournament', '0113_auto_20161129_0415'),
            ('tournament', '0114_auto_20161129_1632'), ('tournament', '0115_auto_20161216_0333'),
            ('tournament', '0116_auto_20161219_0043'), ('tournament', '0117_auto_20161219_0256'),
            ('tournament', '0118_auto_20161220_0055'), ('tournament', '0119_auto_20161220_0100'),
            ('tournament', '0120_auto_20161220_0104'), ('tournament', '0121_auto_20161220_0106'),
            ('tournament', '0122_auto_20161221_0450'), ('tournament', '0123_registration_username_exists'),
            ('tournament', '0124_auto_20161228_2325'), ('tournament', '0125_player_account_status'),
            ('tournament', '0126_alternate_last_contact_date'), ('tournament', '0127_auto_20161230_1947'),
            ('tournament', '0128_auto_20161230_2204'), ('tournament', '0129_auto_20161231_0108'),
            ('tournament', '0130_auto_20161231_1642'), ('tournament', '0131_registration_validation_warning'),
            ('tournament', '0132_auto_20170103_1903'), ('tournament', '0133_auto_20170103_2324'),
            ('tournament', '0134_auto_20170108_0259'), ('tournament', '0135_season_round_duration'),
            ('tournament', '0136_league_rating_type'), ('tournament', '0137_auto_20170108_2223'),
            ('tournament', '0138_player_profile'), ('tournament', '0138_leaguemoderator_is_active'),
            ('tournament', '0139_merge'), ('tournament', '0140_auto_20170122_1710'),
            ('tournament', '0141_auto_20170123_0040'), ('tournament', '0142_auto_20170124_0156'),
            ('tournament', '0143_auto_20170124_2017'), ('tournament', '0144_league_enable_notifications'),
            ('tournament', '0145_auto_20170211_1825'), ('tournament', '0146_league_description'),
            ('tournament', '0147_auto_20170223_2220'), ('tournament', '0148_player_timezone_offset'),
            ('tournament', '0149_auto_20170307_1700'), ('tournament', '0150_team_slack_channel'),
            ('tournament', '0151_auto_20170322_2338'), ('tournament', '0152_leaguesetting'),
            ('tournament', '0153_leaguesetting_max_game_nominations_per_user'), ('tournament', '0154_fcmsub'),
            ('tournament', '0155_alternatesmanagersetting_rating_flex'), ('tournament', '0156_modrequest'),
            ('tournament', '0157_playerpresence'), ('tournament', '0158_auto_20170801_0133'),
            ('tournament', '0159_auto_20170803_2218'), ('tournament', '0160_auto_20170918_0025'),
            ('tournament', '0161_logintoken_username_hint'), ('tournament', '0162_auto_20170920_2143'),
            ('tournament', '0163_auto_20170920_2212'), ('tournament', '0164_logintoken_mail_id'),
            ('tournament', '0165_auto_20170928_2049'), ('tournament', '0166_auto_20171009_1759'),
            ('tournament', '0167_auto_20171025_2304'), ('tournament', '0168_auto_20171028_1948'),
            ('tournament', '0169_registration_section_preference'), ('tournament', '0170_auto_20171028_2128'),
            ('tournament', '0171_auto_20171030_0044'), ('tournament', '0172_auto_20171201_2339'),
            ('tournament', '0173_set_document_owners'), ('tournament', '0174_auto_20171202_0022'),
            ('tournament', '0175_auto_20180117_2042'), ('tournament', '0176_logintoken_source_ip'),
            ('tournament', '0177_auto_20180213_0433'), ('tournament', '0178_auto_20180213_0442'),
            ('tournament', '0177_registration_avoid'), ('tournament', '0179_merge'),
            ('tournament', '0180_leaguesetting_contact_period'), ('tournament', '0181_auto_20180610_2123'),
            ('tournament', '0182_auto_20180728_2344'), ('tournament', '0183_playersetting'),
            ('tournament', '0184_auto_20190518_1606'), ('tournament', '0185_auto_20191221_2144'),
            ('tournament', '0186_auto_20191222_0355'), ('tournament', '0187_auto_20191222_2213'),
            ('tournament', '0188_auto_20191223_1457'), ('tournament', '0189_auto_20210221_0424'),
            ('tournament', '0190_auto_20210424_1519'), ('tournament', '0191_auto_20210613_0346'),
            ('tournament', '0192_player_account_status'), ('tournament', '0193_enable_round_start_mpim'),
            ('tournament', '0194_playerpairing_last_time_player_changed'), ('tournament', '0195_auto_20231118_2130')]

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('tag', models.SlugField(help_text='The league will be accessible at /{league_tag}/', unique=True)),
                ('theme', models.CharField(choices=[('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('yellow', 'Yellow')], max_length=32)),
                ('time_control', models.CharField(blank=True, max_length=32)),
                ('rating_type', models.CharField(choices=[('classical', 'Classical'), ('rapid', 'Rapid'), ('chess960', 'Chess 960'), ('blitz', 'Blitz')], max_length=32)),
                ('competitor_type', models.CharField(choices=[('team', 'Team'), ('individual', 'Individual')], max_length=32)),
                ('enable_notifications', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=1023)),
                ('pairing_type', models.CharField(choices=[('swiss-dutch', 'Swiss Tournament: Dutch Algorithm'), ('swiss-dutch-baku-accel', 'Swiss Tournament: Dutch Algorithm + Baku Acceleration')], max_length=32)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'permissions': (('view_dashboard', 'Can view dashboard'),),
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('lichess_username', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\w-]+$')])),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('games_played', models.PositiveIntegerField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=255)),
                ('profile', models.JSONField(blank=True, null=True)),
                ('date_last_agreed_to_tos', models.DateTimeField(blank=True, null=True)),
                ('date_first_agreed_to_tos', models.DateTimeField(blank=True, null=True)),
                ('oauth_token', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.oauthtoken')),
                ('slack_user_id', models.CharField(blank=True, max_length=255)),
                ('timezone_offset', models.DurationField(blank=True, null=True)),
                ('account_status', models.CharField(choices=[('normal', 'Normal'), ('tos_violation', 'ToS Violation'), ('closed', 'Closed')], default='normal', max_length=31)),
            ],
            options={
                'abstract': False,
                'ordering': ['lichess_username'],
                'permissions': (('change_player_details', 'Can change player details'), ('invite_to_slack', 'Can invite to slack'), ('link_slack', 'Can manually link slack accounts'), ('dox', 'Can see player emails')),
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('tag', models.SlugField(help_text='The season will be accessible at /{league_tag}/season/{season_tag}/')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('rounds', models.PositiveIntegerField()),
                ('round_duration', models.DurationField(default=datetime.timedelta(days=7))),
                ('is_completed', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('boards', models.PositiveIntegerField(blank=True, null=True)),
                ('registration_open', models.BooleanField(default=False)),
                ('nominations_open', models.BooleanField(default=False)),
                ('playoffs', models.PositiveIntegerField(choices=[(0, 'None'), (1, 'Finals'), (2, 'Semi-Finals'), (3, 'Quarter-Finals')], default=0)),
            ],
            options={
                'unique_together': {('league', 'tag'), ('league', 'name')},
                'ordering': ['league__name', '-name'],
                'permissions': (('manage_players', 'Can manage players'), ('review_nominated_games', 'Can review nominated games')),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='team name')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('number', models.PositiveIntegerField(verbose_name='team number')),
                ('is_active', models.BooleanField(default=True)),
                ('slack_channel', models.CharField(blank=True, max_length=255)),
                ('seed_rating', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('season', 'name'), ('season', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('number', models.PositiveIntegerField(verbose_name='round number')),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('publish_pairings', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'permissions': (('generate_pairings', 'Can generate and review pairings'),),
            },
        ),
        migrations.CreateModel(
            name='TeamScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('match_count', models.PositiveIntegerField(default=0)),
                ('match_points', models.PositiveIntegerField(default=0)),
                ('game_points', heltour.tournament.models.ScoreField(default=0)),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
                ('playoff_score', models.PositiveIntegerField(default=0)),
                ('games_won', models.PositiveIntegerField(default=0)),
                ('head_to_head', models.PositiveIntegerField(default=0)),
                ('sb_score', heltour.tournament.models.ScoreField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TeamPairing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('white_points', heltour.tournament.models.ScoreField(default=0)),
                ('black_points', heltour.tournament.models.ScoreField(default=0)),
                ('white_wins', models.PositiveIntegerField(default=0)),
                ('black_wins', models.PositiveIntegerField(default=0)),
                ('black_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairings_as_black', to='tournament.team')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
                ('white_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairings_as_white', to='tournament.team')),
                ('pairing_order', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
                'unique_together': {('white_team', 'black_team', 'round')},
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], max_length=255)),
                ('lichess_username', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\w-]+$')])),
                ('slack_username', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(max_length=255)),
                ('classical_rating', models.PositiveIntegerField(verbose_name='rating')),
                ('peak_classical_rating', models.PositiveIntegerField(blank=True, null=True, verbose_name='peak rating')),
                ('has_played_20_games', models.BooleanField()),
                ('already_in_slack_group', models.BooleanField()),
                ('can_commit', models.BooleanField()),
                ('friends', models.CharField(blank=True, max_length=1023)),
                ('agreed_to_rules', models.BooleanField()),
                ('alternate_preference', models.CharField(blank=True, choices=[('alternate', 'Alternate'), ('full_time', 'Full Time'), ('either', 'Either is fine for me.')], max_length=255)),
                ('weeks_unavailable', models.CharField(blank=True, max_length=255)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('previous_season_alternate', models.CharField(blank=True, choices=[('alternate', 'Yes, I was an alternate at the end of the last season.'), ('alternate_to_full_time', 'Yes, but I was able to find a consistent team (did not simply fill in for a week or two).'), ('full_time', 'No, I was not an alternate for the last season. I played the season.'), ('new', 'No, I was not an alternate for the last season. I am a new member / I took last season off.')], max_length=255)),
                ('status_changed_by', models.CharField(blank=True, max_length=255)),
                ('status_changed_date', models.DateTimeField(blank=True, null=True)),
                ('agreed_to_tos', models.BooleanField()),
                ('avoid', models.CharField(blank=True, max_length=1023)),
                ('section_preference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.section')),
                ('validation_ok', models.BooleanField(blank=True, default=None, null=True)),
                ('validation_warning', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('is_captain', models.BooleanField(default=False)),
                ('is_vice_captain', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('player_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
            ],
            options={
                'unique_together': {('team', 'board_number')},
            },
        ),
        migrations.CreateModel(
            name='SeasonPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('games_missed', models.PositiveIntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('registration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.registration')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('final_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('seed_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('unresponsive', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('season', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerPairing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('result', models.CharField(blank=True, choices=[('1-0', '1-0'), ('1/2-1/2', '½-½'), ('0-1', '0-1'), ('1X-0F', '1X-0F'), ('1/2Z-1/2Z', '½Z-½Z'), ('0F-1X', '0F-1X'), ('0F-0F', '0F-0F')], max_length=16)),
                ('game_link', models.URLField(blank=True, max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^(https?://)?([a-z]+\\.)?lichess\\.org/([A-Za-z0-9]{8})([A-Za-z0-9]{4})?([/#\\?].*)?$'))])),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('black', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pairings_as_black', to='tournament.player')),
                ('white', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pairings_as_white', to='tournament.player')),
                ('date_player_changed', models.DateTimeField(blank=True, null=True)),
                ('white_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('black_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('tv_state', models.CharField(choices=[('default', 'Default'), ('hide', 'Hide')], default='default', max_length=31)),
                ('colors_reversed', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('secret_token', models.CharField(default=heltour.tournament.models.create_api_token, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField()),
                ('owner', models.ForeignKey(limit_choices_to=models.Q(('is_staff', True)), on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('allow_editors', models.BooleanField(default=False, verbose_name='Allow designated editors')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeagueDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[('faq', 'FAQ'), ('rules', 'Rules'), ('intro', 'Intro'), ('slack-welcome', 'Slack Welcome')], max_length=255)),
                ('tag', models.SlugField(help_text='The document will be accessible at /{league_tag}/document/{document_tag}/')),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.document')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
            ],
            options={
                'unique_together': {('league', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='AlternateBucket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
                ('min_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('max_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'unique_together': {('season', 'board_number')},
            },
        ),
        migrations.CreateModel(
            name='AlternateAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
                ('replaced_player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alternate_replacements', to='tournament.player'))
            ],
            options={
                'unique_together': {('round', 'team', 'board_number')},
            },
        ),
        migrations.CreateModel(
            name='Alternate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
                ('player_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('season_player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.seasonplayer')),
                ('status', models.CharField(blank=True, choices=[('waiting', 'Waiting'), ('contacted', 'Contacted'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('unresponsive', 'Unresponsive')], default='waiting', max_length=31)),
                ('last_contact_date', models.DateTimeField(blank=True, null=True)),
                ('priority_date_override', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'unique_together': set(),
            },
        ),
        migrations.CreateModel(
            name='PlayerAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('is_available', models.BooleanField(default=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'player availabilities',
            },
        ),
        migrations.CreateModel(
            name='LonePlayerPairing',
            fields=[
                ('playerpairing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.playerpairing')),
                ('pairing_order', models.PositiveIntegerField()),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
                ('white_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('black_rank', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament.playerpairing',),
        ),
        migrations.CreateModel(
            name='TeamPlayerPairing',
            fields=[
                ('playerpairing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.playerpairing')),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
                ('team_pairing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.teampairing')),
            ],
            options={
                'unique_together': {('team_pairing', 'board_number')},
            },
            bases=('tournament.playerpairing',),
        ),
        migrations.CreateModel(
            name='LonePlayerScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('points', heltour.tournament.models.ScoreField(default=0)),
                ('late_join_points', heltour.tournament.models.ScoreField(default=0)),
                ('tiebreak1', heltour.tournament.models.ScoreField(default=0)),
                ('tiebreak2', heltour.tournament.models.ScoreField(default=0)),
                ('tiebreak3', heltour.tournament.models.ScoreField(default=0)),
                ('tiebreak4', heltour.tournament.models.ScoreField(default=0)),
                ('acceleration_group', models.PositiveIntegerField(default=0)),
                ('season_player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.seasonplayer')),
                ('perf_rating', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeasonPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('rank', models.PositiveIntegerField()),
                ('max_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'unique_together': {('season', 'rank', 'max_rating')},
            },
        ),
        migrations.CreateModel(
            name='SeasonPrizeWinner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('season_prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.seasonprize')),
            ],
            options={
                'unique_together': {('season_prize', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerWithdrawal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'unique_together': {('round', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerBye',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('full-point-pairing-bye', 'Full-Point Bye (Pairing)'), ('full-point-bye', 'Full-Point Bye'), ('half-point-bye', 'Half-Point Bye'), ('zero-point-bye', 'Zero-Point Bye')], max_length=31)),
                ('player_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('player_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'unique_together': {('round', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerLateRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('retroactive_byes', models.PositiveIntegerField(default=0)),
                ('late_join_points', heltour.tournament.models.ScoreField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'unique_together': {('round', 'player')},
            },
        ),
        migrations.CreateModel(
            name='GameSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('game_link', models.URLField(validators=[django.core.validators.RegexValidator(re.compile('^(https?://)?([a-z]+\\.)?lichess\\.org/([A-Za-z0-9]{8})([A-Za-z0-9]{4})?([/#\\?].*)?$'))])),
                ('pairing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.playerpairing')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'abstract': False,
                'unique_together': {('season', 'game_link')},
            },
        ),
        migrations.CreateModel(
            name='NavItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField()),
                ('text', models.CharField(max_length=255)),
                ('path', models.CharField(blank=True, max_length=1023)),
                ('league_relative', models.BooleanField(default=False)),
                ('season_relative', models.BooleanField(default=False)),
                ('append_separator', models.BooleanField(default=False)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.navitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrivateUrlAuth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('authenticated_user', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\w-]+$')])),
                ('secret_token', models.CharField(default=heltour.tournament.models.create_api_token, max_length=255, unique=True)),
                ('expires', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AvailableTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('time', models.DateTimeField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GameNomination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('game_link', models.URLField(validators=[django.core.validators.RegexValidator(re.compile('^(https?://)?([a-z]+\\.)?lichess\\.org/([A-Za-z0-9]{8})([A-Za-z0-9]{4})?([/#\\?].*)?$'))])),
                ('nominating_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('pairing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.playerpairing')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerNotificationSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('round_started', 'Round started'), ('before_game_time', 'Before game time'), ('game_time', 'Game time'), ('unscheduled_game', 'Unscheduled game'), ('game_warning', 'Game warning'), ('alternate_needed', 'Alternate needed')], max_length=255)),
                ('offset', models.DurationField(blank=True, null=True)),
                ('enable_lichess_mail', models.BooleanField()),
                ('enable_slack_im', models.BooleanField()),
                ('enable_slack_mpim', models.BooleanField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
            ],
            options={
                'unique_together': {('player', 'type', 'league')},
            },
        ),
        migrations.CreateModel(
            name='ScheduledNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('notification_time', models.DateTimeField()),
                ('pairing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.playerpairing')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.playernotificationsetting')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeagueChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('mod', 'Mods'), ('captains', 'Captains'), ('scheduling', 'Scheduling')], max_length=255)),
                ('slack_channel', models.CharField(max_length=255)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('send_messages', models.BooleanField(default=True)),
                ('slack_channel_id', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'unique_together': {('league', 'slack_channel', 'type')},
            },
        ),
        migrations.CreateModel(
            name='AlternateSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('board_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')])),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(blank=True, choices=[('started', 'Started'), ('all_contacted', 'All alternates contacted'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], max_length=31)),
                ('last_alternate_contact_date', models.DateTimeField(blank=True, null=True)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
            ],
            options={
                'unique_together': {('round', 'team', 'board_number')},
            },
        ),
        migrations.CreateModel(
            name='LeagueModerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('send_contact_emails', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('league', 'player')},
            },
        ),
        migrations.CreateModel(
            name='SeasonDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('tag', models.SlugField(help_text='The document will be accessible at /{league_tag}/season/{season_tag}/document/{document_tag}/')),
                ('type', models.CharField(blank=True, choices=[('links', 'Links')], max_length=255)),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.document')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'unique_together': {('season', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='LeagueSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('limit_game_nominations_to_participants', models.BooleanField(default=True)),
                ('league', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('max_game_nominations_per_user', models.PositiveIntegerField(default=3)),
                ('contact_period', models.DurationField(default=datetime.timedelta(days=2))),
                ('carry_over_red_cards_as_yellow', models.BooleanField(default=True)),
                ('close_registration_at_last_round', models.BooleanField(default=True)),
                ('notify_for_pre_season_registrations', models.BooleanField(default=False)),
                ('notify_for_registrations', models.BooleanField(default=True)),
                ('warning_for_late_response', models.BooleanField(default=True)),
                ('notify_for_comments', models.BooleanField(default=True)),
                ('notify_for_forfeits', models.BooleanField(default=True)),
                ('notify_for_latereg_and_withdraw', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FcmSub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('slack_user_id', models.CharField(max_length=31)),
                ('reg_id', models.CharField(max_length=4096, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlternatesManagerSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('contact_interval', models.DurationField(default=datetime.timedelta(seconds=28800), help_text='How long before the next alternate will be contacted during the round.')),
                ('unresponsive_interval', models.DurationField(default=datetime.timedelta(days=1), help_text='How long after being contacted until an alternate will be marked as unresponsive.')),
                ('contact_before_round_start', models.BooleanField(default=True, help_text='If we should search for alternates before the pairings are published. Has no effect for round 1.')),
                ('contact_offset_before_round_start', models.DurationField(default=datetime.timedelta(days=2), help_text='How long before the round starts we should start searching for alternates. Also ends the previous round searches early.')),
                ('contact_interval_before_round_start', models.DurationField(default=datetime.timedelta(seconds=43200), help_text="How long before the next alternate will be contacted, if the round hasn't started yet.")),
                ('league', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('rating_flex', models.PositiveIntegerField(default=0, help_text="How far out of a board's rating range an alternate can be if it helps alternate balance.")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerPresence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('first_msg_time', models.DateTimeField(blank=True, null=True)),
                ('last_msg_time', models.DateTimeField(blank=True, null=True)),
                ('online_for_game', models.BooleanField(default=False)),
                ('pairing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.playerpairing')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('withdraw', 'Withdraw'), ('reregister', 'Re-register'), ('appeal_late_response', 'Appeal late response'), ('appeal_noshow', 'Appeal no-show'), ('appeal_draw_scheduling', 'Appeal scheduling draw'), ('claim_win_noshow', 'Claim a forfeit win (no-show)'), ('claim_win_effort', 'Claim a forfeit win (insufficient effort)'), ('claim_draw_scheduling', 'Claim a scheduling draw'), ('claim_loss', 'Claim a forfeit loss'), ('request_continuation', 'Request continuation')], max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], max_length=31)),
                ('status_changed_by', models.CharField(blank=True, max_length=255)),
                ('status_changed_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to='screenshots/%Y/%m/%d/')),
                ('response', models.TextField(blank=True)),
                ('pairing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.playerpairing')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('unresponsive', 'unresponsive'), ('card_unresponsive', 'card for unresponsive'), ('card_noshow', 'card for no-show')], max_length=255)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
                ('round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.round')),
            ],
            options={
                'abstract': False,
                'unique_together': {('round', 'player', 'type')},
            },
        ),
        migrations.CreateModel(
            name='ScheduledEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('notify_mods_unscheduled', 'Notify mods of unscheduled games'), ('notify_mods_no_result', 'Notify mods of games without results'), ('notify_mods_pending_regs', 'Notify mods of pending registrations'), ('start_round_transition', 'Start round transition'), ('notify_players_unscheduled', 'Notify players of unscheduled games'), ('notify_players_game_time', 'Notify players of their game time'), ('automod_unresponsive', 'Auto-mod unresponsive players'), ('automod_noshow', 'Auto-mod no-shows')], max_length=255)),
                ('offset', models.DurationField()),
                ('relative_to', models.CharField(choices=[('round_start', 'Round start'), ('round_end', 'Round end'), ('game_scheduled_time', 'Game scheduled time')], max_length=255)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LoginToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('lichess_username', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator('^[\\w-]+$')])),
                ('slack_user_id', models.CharField(blank=True, max_length=255)),
                ('secret_token', models.CharField(default=heltour.tournament.models.create_api_token, max_length=255, unique=True)),
                ('expires', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('username_hint', models.CharField(blank=True, max_length=255)),
                ('mail_id', models.CharField(blank=True, max_length=255)),
                ('source_ip', models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
       migrations.CreateModel(
            name='SectionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.league')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='section name')),
                ('min_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('max_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('season', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
                ('section_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.sectiongroup')),
                ('order', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('dark_mode', models.BooleanField(default=False)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OauthToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('access_token', models.CharField(max_length=4096)),
                ('token_type', models.CharField(max_length=255)),
                ('expires', models.DateTimeField()),
                ('refresh_token', models.CharField(blank=True, max_length=4096)),
                ('scope', models.TextField(blank=True)),
                ('account_username', models.CharField(max_length=255)),
                ('account_email', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
   ]
